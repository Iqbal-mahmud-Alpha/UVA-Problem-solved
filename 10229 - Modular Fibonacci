#include<bits/stdc++.h>
using namespace std;
#define faster         ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define mem(a,b)       memset(a,b,sizeof(a))
#define all(a)         a.begin(),a.end()
#define Sort(x)        sort(x.begin(),x.end())
#define Reverse(x)     reverse(x.begin(),x.end())
#define ff first
#define ss second
#define pr pair<lli,lli>
#define pb push_back
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*(b/gcd(a,b)))
//#define mod  1000000007
#define num 1000008

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int  llu;
bool vowels(char ch)
{
    if(ch=='a' or ch=='e' or ch=='i' or ch=='o' or ch=='u')
    {
        return true;
    }
    if(ch=='A' or ch=='E' or ch=='I' or ch=='O' or ch=='U')
    {
        return true;
    }
    return false;
}
bool upper_case(char ch)
{
    if(ch>='A' && ch<='Z')
    {
        return true;
    }
    return false;

}
bool lower_case(char ch)
{
    if(ch>='a' && ch<='z')
    {
        return true;
    }
    return false;

}
ll I[3][3],M[3][3];
ll mod;
void mul(ll I[3][3],ll M[3][3])
{
    ll res[3][3];
    ll ans[3][3];
    for(int i=1; i<3; i++)
    {
        for(int j=1; j<3; j++)
        {
            res[i][j]=0;
            for(int k=1; k<3; k++)
            {
                ans[i][j]=(I[i][k]*M[k][j]);
                ans[i][j]%=mod;
                res[i][j]=(res[i][j]+ans[i][j])%mod;

            }
        }
    }
    for(int i=1; i<3; i++)
    {
        for(int j=1; j<3; j++)
        {
            I[i][j]=res[i][j];
        }
    }
}
void power(ll I[3][3],ll M[3][3],ll pow)
{
    I[1][1]=I[2][2]=1;
    I[1][2]=I[2][1]=0;

    M[1][1]=M[1][2]=M[2][1]=1;
    M[2][2]=0;
    while(pow)
    {
        if(pow%2==0)
        {
            mul(M,M);
            pow/=2;
        }
        else
        {
            mul(I,M);
            pow--;
        }
    }
    cout<<I[1][1]<<endl;
}
int main()
{
    ll n,m;

    while(cin>>n>>m)
    {
        mod=pow(2,m);
        if(n==0)cout<<n%mod<<endl;
        else if(n==1)cout<<1%mod<<endl;
        else if(n==2)cout<<1%mod<<endl;
        else
            power(I,M,n-1);
    }
}
